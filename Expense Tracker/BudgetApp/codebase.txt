namespace BudgetApp.Database;

public interface IFileFormat
{
    public abstract List<Transaction> Load(string filePath);
    public abstract void Save(List<Transaction> transactions, string filePath);
    public abstract List<Category> LoadCategories(string filePath);
    public abstract void SaveCategories(List<Category> categories, string filePath);
}using Newtonsoft.Json;
using System.Collections.Generic;
using System.IO;

namespace BudgetApp.Database
{
    public class JsonFormat : IFileFormat
    {
        JsonSerializerSettings settings = new JsonSerializerSettings
        {
            TypeNameHandling = TypeNameHandling.Auto,
            NullValueHandling = NullValueHandling.Ignore,
            ReferenceLoopHandling = ReferenceLoopHandling.Ignore
        };

        public List<Transaction> Load(string filePath)
        {
            string jsonContent = File.ReadAllText(filePath);
            List<Transaction> transactions = JsonConvert.DeserializeObject<List<Transaction>>(jsonContent, settings);
            return transactions;
        }

        public void Save(List<Transaction> transactions, string filePath)
        {
            string jsonContent = JsonConvert.SerializeObject(transactions, settings);
            File.WriteAllText(filePath, jsonContent);
        }

        public List<Category> LoadCategories(string filePath)
        {
            string jsonContent = File.ReadAllText(filePath);
            List<Category> categories = JsonConvert.DeserializeObject<List<Category>>(jsonContent, settings);
            return categories;
        }

        public void SaveCategories(List<Category> categories, string filePath)
        {
            string jsonContent = JsonConvert.SerializeObject(categories, settings);
            File.WriteAllText(filePath, jsonContent);
        }
    }
}using System;
using System.Collections.Generic;
using System.IO;
using BudgetApp;
using BudgetApp.Management;

namespace BudgetApp.Database
{
    public class Database
    {
        private static Database? instance = null;
        private IFileFormat fileFormat;
        private string transactionFilePath = Path.Combine(AppContext.BaseDirectory, "Database/transactions.json");
        private string categoryFilePath = Path.Combine(AppContext.BaseDirectory, "Database/categories.json");

        private Database(IFileFormat fileFormat)
        {
            this.fileFormat = fileFormat;
        }

        public static Database Instance
        {
            get
            {
                if (instance == null)
                {
                    instance = new Database(new JsonFormat());
                    instance.Initialize();
                }
                return instance;
            }
        }

        public List<Transaction> LoadTransactions()
        {
            return fileFormat.Load(transactionFilePath);
        }

        public void SaveTransactions(List<Transaction> transactions)
        {
            fileFormat.Save(transactions, transactionFilePath);
        }

        public List<Category> LoadCategories()
        {
            return fileFormat.LoadCategories(categoryFilePath);
        }

        public void SaveCategories(List<Category> categories)
        {
            fileFormat.SaveCategories(categories, categoryFilePath);
        }
        
        public void Initialize()
        {
            LoadCategories();
            
            LoadTransactions();
            
            SaveCategories(CategoryController.GetCategories());
            
            SaveTransactions(TransactionController.GetTransactions());
        }
    }
}// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("BudgetApp")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+7375b1355568f67f4c89392c71f65a6327767ae1")]
[assembly: System.Reflection.AssemblyProductAttribute("BudgetApp")]
[assembly: System.Reflection.AssemblyTitleAttribute("BudgetApp")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.

// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v7.0", FrameworkDisplayName = ".NET 7.0")]
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("BudgetApp")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+4800411528056a8c8d50ea7104c750655fffcb96")]
[assembly: System.Reflection.AssemblyProductAttribute("BudgetApp")]
[assembly: System.Reflection.AssemblyTitleAttribute("BudgetApp")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.

// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;
ï»¿using System;
using System.Collections.Generic;
using BudgetApp;
using BudgetApp.Database;
using BudgetApp.Menus.TrueMenus;

    public static class ExpenseTrackerApp
    {
        public static void Run()
        {
            // Initialize the Database class and load the categories from the database
            Database.Instance.Initialize();
            Budget.Initialize(0);

            // Add default categories
            var defaultCategories = new List<string> { "Food", "Bills", "Entertainment", "Clothes", "Transportation" };
            foreach (var categoryName in defaultCategories)
            {
                if (CategoryController.GetCategory(categoryName) == null)
                {
                    var newCategory = new Category(categoryName);
                    CategoryController.GetCategories().Add(newCategory);
                }
            }

            // Save the categories to the database
            Database.Instance.SaveCategories(CategoryController.GetCategories());

            MenuStack.PushMenu(new MainMenu());
        }
    }
using System;

namespace BudgetApp
{
    public class MainMenu
    {
        DurationSelector menu3 = new DurationSelector();
        public void RunMainMenu()
        {
            //SelectableMenu mainMenu = new SelectableMenu("Welcome to the Budget App. Please select an option:", new []{"Start", "About", "Exit"});
            //int userChoice = mainMenu.Run();

            while (true)
            {
                DisplayOptions();
                Console.WriteLine("Please select an option");
                Console.WriteLine();
                int userChoice = Convert.ToInt32(Console.ReadLine());
                switch (userChoice)
                {
                    case 1:

                        //BenDHogg to implement where dates come from
                        //TransactionController.GetAllTransactions();
                        break;
                    case 2:

                        Console.WriteLine("Budget for october set at 1000.");
                        BudgetController.CreateOverallBudget("October",new DateTime(2024,10,01),new DateTime(2024,10,20), 1000);
                        break;
                    case 3:
                        //menu3.DisplayMenu();
                        // BudgetController.BudgetBreakdown(BudgetController.GetBudget("October"));
                        //BudgetController.CategorySummaryForBudget(BudgetController.GetBudget("October"));
                        BudgetController.CalculateOverallSpending(BudgetController.GetBudget("October"));

                        break;

                    case 4:
                        Console.WriteLine("Please enter the category name");
                        string categoryName = Console.ReadLine();
                        CategoryController.CreateCategory(categoryName);

                        Console.WriteLine("Would you like to set a budget for this category?");
                        string response = Console.ReadLine();

                        if (response.ToUpper() == "Y")
                        {
                            CategoryController.SetCategoryBudget(CategoryController.GetCategory(categoryName));
                        }
                        else
                        {
                            Console.WriteLine("Thanks, category added with no budget.");
                        }

                            break;
                    case 5:
                        Console.WriteLine("Please select a category");
                        CategoryController.SetCategoryBudget(CategoryController.GetCategory("Food"));
                       
                        break;
                    case 6:

                        CategoryController.SetCategoryBudget(CategoryController.GetCategory("Food"));
                        CategoryController.SetCategoryBudget(CategoryController.GetCategory("Bills"));
                        //CategoryController.SetCategoryBudget(CategoryController.GetCategory("Entertainment"));
                        //CategoryController.SetCategoryBudget(CategoryController.GetCategory("Clothes"));

                        Transaction food1 = new Transaction(CategoryController.GetCategory("Food"), new DateTime(2024, 10, 02), 100, true, true);
                        Transaction bills1 = new Transaction(CategoryController.GetCategory("Bills"), new DateTime(2024, 10, 02), 100, true, true);
                        Transaction grub1 = new Transaction(CategoryController.GetCategory("Entertainment"), new DateTime(2024, 10, 02), 100, true, true);
                        Transaction clothes1 = new Transaction(CategoryController.GetCategory("Clothes"), new DateTime(2024, 10, 03), 100, true, true);

                        TransactionController.AddTransactions(food1);
                        TransactionController.AddTransactions(bills1);
                        TransactionController.AddTransactions(grub1);
                        TransactionController.AddTransactions(clothes1);

                        BudgetController.UpdateBudgetStatus(food1);
                        BudgetController.UpdateBudgetStatus(bills1);
                        BudgetController.UpdateBudgetStatus(grub1);
                        BudgetController.UpdateBudgetStatus(clothes1);



                        break;
                    case 7:

                        Console.WriteLine("Categories List ");
                        Console.WriteLine("-------------");
                        int n = 1;
                        foreach (var category in CategoryController.categories)
                        {
                           
                            Console.WriteLine($"{n}. {category.name}");
                            n++;
                        }
                        Console.WriteLine("------------");
                        Console.WriteLine();
                        break;
                      
                    default:
                        Console.WriteLine("Invalid choice");
                        break;
                }
            }
            
        }

        public static void DisplayOptions()
        {
            Console.WriteLine("1. See All Transactions");
            Console.WriteLine("2. Set Budget");
            Console.WriteLine("3. View Budget");
            Console.WriteLine("4. Add Category");
            Console.WriteLine("5. Set Budget for Category");
            Console.WriteLine("6. Add Transaction");
            Console.WriteLine("7. See all categories");
        }
    }
}using BudgetApp;

namespace BudgetApp;


public class OpeningMenu
{
    SelectableMenu _menu = new SelectableMenu("Welcome to BudgetApp! Please select an option:", new string[] { "start", "about", "Exit" });

    public void RunMenu()
    {
        int selection = _menu.NavigateMenu();
        switch (selection)
        {
            case 0:
                DurationSelector menu3 = new DurationSelector();
                menu3.DisplayMenu();
                
                break;
            case 1:
                Console.WriteLine("About BudgetApp...");
                break;
            case 2:
                Console.WriteLine("Exiting BudgetApp...");
                break;
        }
    }
}namespace BudgetApp;

public class BudgetSetMenu
{
    SelectableMenu _menu = new SelectableMenu("Please select an option:", new string[] { "Set Budget", "Clear Budget", "Back" });
    
    public void RunMenu()
    {
        int selection = _menu.NavigateMenu();
        switch (selection)
        {
            case 0:
                Console.WriteLine("Set Budget...");
                break;
            case 1:
                Console.WriteLine("Clear Budget...");
                break;
            case 2:
                Console.WriteLine("Back...");
                break;
        }
    }
    
}namespace BudgetApp;

public static class MenuStack
{
    public static Stack<object> _menuStack = new Stack<object>();
    
    public static void Push(object menu)
    {
        _menuStack.Push(menu);
    }
    
    public static object Pop()
    {
        return _menuStack.Pop();
    }
    
    public static object Peek()
    {
        return _menuStack.Peek();
    }
}using System.Diagnostics;
using BudgetApp.Management;
using static BudgetApp.Calendar;

namespace BudgetApp;

public static class BudgetController
{
    public static Budget GetBudget() => Budget.Instance;

    public static void UpdateBudgetStatus()
    {
        Budget.Instance.amountSpent = 0;
        foreach (var transaction in TransactionController.GetTransactions())
        {
            if (transaction.GetType() == typeof(Expense))
            {
                Budget.Instance.amountSpent += transaction.Amount;
            }
        }
    }

    public static string BudgetSummary(DateTime start, DateTime end, Calendar calendar)
    {
        double amountSpent = 0;
        int n = 1;
        foreach (var transaction in TransactionController.GetTransactions())
        {
            if (Validator.TransactionInPeriod(transaction.Date, start, end) & transaction.GetType() == typeof(Expense))
            {
                amountSpent += transaction.Amount;
            }
        }
        switch (calendar._currentScale)
        {
            case Calendar.DurationScale.Yearly:
                return $"Total spent {amountSpent} / {Budget.Instance.yearlyAllocation}";
            case Calendar.DurationScale.Monthly:
                return $"Total spent {amountSpent} / {Budget.Instance.GetMonthlyAllocation()}";  
            case Calendar.DurationScale.Daily:
                return $"Total spent {amountSpent} / {Budget.Instance.GetDailyAllocation()}";
        }
        return "No Overall Budget Set";
    }
}
ï»¿using System;
namespace BudgetApp;
public static class Validator
{
    public static bool TransactionInPeriod(DateTime transactionDate, DateTime start, DateTime end) => transactionDate >= start && transactionDate <= end;

    public static double ReceiveValidAmount()
    {
        while (true)
        {
            Console.Write("Enter amount: ");
            var amount = Console.ReadLine();
            if (double.TryParse(amount, out double result) && double.IsPositive(result))
            {
                return Math.Round(result, 2);
            }
            Console.WriteLine("Please enter a positive number");
        }
    }
}


ï»¿using System; 
using BudgetApp.Database;
using BudgetApp;
using System.Transactions;

using BudgetApp.Management;
public static class CategoryController
{
    private static List<Category> categories;

    public static List<Category> Categories
    {
        get
        {
            if (categories == null)
            {
                categories = Database.Instance.LoadCategories();
            }
            return categories;
        }
    }
    public static Category GetCategory(string categoryName)
    {
        if (Categories == null)
        {
            throw new Exception("Categories is null. Make sure to load the categories before accessing them.");
        }

        return Categories.Find(c => c.name == categoryName);
    }

    public static List<Category> GetCategories() => Categories;

    public static string[] GetCategoryNamesPlusAddOption()
    {
        int n = 1;
        string[] categoryNames = new string[categories.Count + 1];
        for (int i = 0; i < categories.Count; i++)
        {
            categoryNames[i] = $"{n}. {categories[i].name}";
            n++;
        }
        categoryNames[categoryNames.Length - 1] = "Add Category";
        return categoryNames;
    }

    public static void UpdateCategoryAllowance(Transaction newTransaction) => newTransaction.Category.spent += newTransaction.Amount;
    
    public static Category ReceiveNewCategory()
    {
        while (true)
        {
            Console.WriteLine("Enter a new category name:");
            string categoryName = Console.ReadLine();
            if (!string.IsNullOrWhiteSpace(categoryName) && !categories.Any(c => c.name.ToUpper() == categoryName.ToUpper()))
            {
                Console.WriteLine($"New Category {categoryName} created!");
                Console.WriteLine("Press any key to continue");
                Console.ReadKey();
                categories.Add(new Category(categoryName));

                Database.Instance.SaveCategories(categories); 

                return GetCategory(categoryName);
            }
            else
            {
                Console.WriteLine("Please type a valid category, that does not already exist.");
            }
        }
    }

    public static void SetCategoryBudget(Category category, int frequency)
    {
        Console.WriteLine($"How much would you like to allocate to {category.name}");
        double budget = Validator.ReceiveValidAmount();
        switch (frequency)
        {
            case 1:
                category.budget = budget*365;
                break;
            case 7:
                category.budget = budget * 52; ;
                break;
            case 30:
                category.budget = budget* 12;
                break;
            case 365:
                category.budget = budget;
                break;
        }
        Console.WriteLine($"Budget of {budget} set for {category.name}");
        Console.WriteLine("Press any key to continue");
        Console.ReadKey();
        //Update with existing transactions once set
        foreach (var transaction in TransactionController.GetTransactions())
        {
            if (transaction.Category == category)
            {
                category.spent += transaction.Amount;
            }
        }
    }


    public static List<string> CategorySummary(DateTime start, DateTime end, Calendar calendar)
    {
        Dictionary<string, double> summaryPerCategory = new Dictionary<string, double>();

        //Each category summarised in a dictionary (name (key) : spending (value))
        foreach (var category in CategoryController.categories)
        {
            summaryPerCategory[category.name] = 0;
        }

        //Get spending per period selected from Menu
        foreach (var transaction in TransactionController.GetTransactions())
        {
            if (Validator.TransactionInPeriod(transaction.Date, start, end) && transaction.GetType() == typeof(Expense))
            {
                summaryPerCategory[transaction.Category.name] += transaction.Amount;
            }
        }

        List<string> categorySummaries = new List<string>();

        foreach (var KvP in summaryPerCategory)
        {
            if (CategoryController.categories.Any(c => c.budget != null && c.name == KvP.Key))
            {
                if (KvP.Value > 0)
                {
                    double roundedValue = Math.Round(KvP.Value, 2);
                    
                    switch (calendar._currentScale)
                    {
                        case Calendar.DurationScale.Yearly:
                            categorySummaries.Add($"Total spent on {KvP.Key}: Â£{roundedValue} / Â£{(float)CategoryController.GetCategory(KvP.Key).budget} (yearly)");
                            break;
                        case Calendar.DurationScale.Monthly:
                            categorySummaries.Add($"Total spent on {KvP.Key}: Â£{roundedValue} /  Â£{(float)CategoryController.GetCategory(KvP.Key).GetMonthlyAllocation()} (monthly)");
                            break;
                        case Calendar.DurationScale.Daily:
                            categorySummaries.Add($"Total spent on {KvP.Key}: Â£{roundedValue} /  Â£{(float)CategoryController.GetCategory(KvP.Key).GetDailyAllocation()} (daily)");
                            break;
                    }
                }
                   
            }
            else
            {
                if (KvP.Value > 0)
                {
                    double roundedValue = Math.Round(KvP.Value, 2);
                    categorySummaries.Add($"Total spent on {KvP.Key}: Â£{roundedValue}");
                }
            }
        }
        return categorySummaries;
    }
}


using System.Text;

namespace BudgetApp.Management
{
    using BudgetApp;
    using BudgetApp.Database;
    using BudgetApp.Menus;

    public static class TransactionController
    {
        private static List<Transaction> transactions;

        private static void LoadTransactions()
        {
            transactions = Database.Instance.LoadTransactions();
        }

        public static List<Transaction> GetTransactions()
        {
            if (transactions == null)
            {
                LoadTransactions();
            }
            return transactions;
        }

        public static void SaveTransactions()
        {
            Database.Instance.SaveTransactions(transactions);
        }
        
        public static void AddNoteToTransaction(Transaction transaction, string note)
        {
            transaction.Note = note;
            SaveTransactions();
        }

        public static string TransactionSummary(DateTime start, DateTime end)
        {
            List<Transaction> list = GetTransactionsWithinRange(start, end);
            StringBuilder sb = new StringBuilder();
            int i = 1;
            foreach (var transaction in list)
            {
                string transactionDisplay = $"{i}. {transaction.Display}";
                sb.AppendLine(transactionDisplay);
                i++;
            }
            if (list.Count == 0)
            {
                sb.AppendLine("No transactions for this period");
            }
            return sb.ToString();
        }

        public static List<Transaction> GetTransactionsWithinRange(DateTime start, DateTime end) => transactions.Where(c => c.Date >= start && c.Date <= end).ToList();

        public static Transaction[] GetTransactionsWithinRangeAsArray(DateTime start, DateTime end) =>
            transactions.Where(c => c.Date >= start && c.Date <= end).ToArray();


        public static void AddTransaction(Transaction newTransaction)
        {
            if (newTransaction.Category == null)
            {
                throw new ArgumentException("Transaction must have a valid category.");
            }

            transactions.Add(newTransaction);
            CategoryController.UpdateCategoryAllowance(newTransaction);
            if (BudgetController.GetBudget() != null)
            {
                BudgetController.UpdateBudgetStatus();
            }
            SaveTransactions(); 
        }

        public static void DeleteTransaction(Transaction transaction)
        {
            transaction.Category.spent -= transaction.Amount;
            transactions.Remove(transaction);
            if (BudgetController.GetBudget() != null)
            {
                BudgetController.UpdateBudgetStatus();
            }

            SaveTransactions(); 
        }
    }
}
using BudgetApp;
using Newtonsoft.Json;
public class Transaction
{
    public string CategoryName { get; set; }
    public double Amount { get; set; }
    public DateTime Date = DateTime.Today;
    public string Note { get; set; } // Added nullable note attribute

    [JsonIgnore]
    public Category Category 
    { 
        get 
        {
            return CategoryController.GetCategory(CategoryName);
        } 
    }

    public Transaction(string categoryName, DateTime month, double amount, string note = null)
    {
        if (string.IsNullOrEmpty(categoryName))
        {
            throw new ArgumentNullException(nameof(categoryName));
        }

        CategoryName = categoryName;
        Amount = amount;
        Date = month;
        Note = note; // Assign the note
    }

    public virtual string Display
    {
        get
        {
            if (Category == null)
            {
                throw new NullReferenceException("Category object is null.");
            }
            return $"{Category.name}: Â£{Amount} on {Date.ToShortDateString()}";
        }
    }
}
namespace BudgetApp
{
    public class Budget
    {
        public double yearlyAllocation { get; set; }
        public double amountSpent { get; set; }

        
        private Budget(double totalAllocatedAmount)
        {
            this.yearlyAllocation = totalAllocatedAmount;
        }

        private static Budget _instance;

        public static Budget Instance
        {
            get
            {
                if (_instance == null)
                {
                    throw new Exception("Budget instance has not been initialized.");
                }
                return _instance;
            }
        }

        public static void Initialize(double totalAllocatedAmount)
        {
            if (_instance != null)
            {
                throw new Exception("Budget instance has already been initialized.");
            }
            _instance = new Budget(totalAllocatedAmount);
        }

        public double GetDailyAllocation() => Math.Round((yearlyAllocation / 365), 2);
        public double GetMonthlyAllocation() => Math.Round((yearlyAllocation / 12), 2);
    }
}ï»¿namespace BudgetApp;

public class Income : Transaction
{
	public Income(string categoryName, DateTime month, double amount) : base(categoryName, month, amount)
	{
	}

	public override string Display => $"[green]{Category.name}: + Â£{Amount} on {Date.ToShortDateString()}[/]";
}

ï»¿namespace BudgetApp;

public class Expense : Transaction
{
	public Expense(string categoryName, DateTime month, double amount) : base(categoryName, month, amount)
	{
	}

	public override string Display => $"[red]{Category.name}: - Â£{Amount} on {Date.ToShortDateString()}[/]";
}

namespace BudgetApp
{
    using System;
    using System.Collections.Generic;

    public class Category
    {
        public string name { get; set; }
        public double? budget { get; set; }
        public double spent { get; set; }
        
        // JSON objects require a parameterless constructor
        public Category() { }

        public Category(string name)
        {
            this.name = name;
            budget = null;
        }

        public double GetDailyAllocation() => Math.Round((double)(budget/365),2);
        public double GetMonthlyAllocation() => Math.Round((double)(budget / 12), 2);
    }
}

using BudgetApp.Management;

namespace BudgetApp.Menus.TrueMenus
{
    public class TransactionFactory
    {
        private static TransactionFactory _instance;

        public static TransactionFactory GetInstance()
        {
            if (_instance == null)
            {
                _instance = new TransactionFactory();
            }

            return _instance;
        }
        
        public Transaction CreateDummyTransaction(string categoryName, DateTime date, double amount) => new Transaction(categoryName, date, amount);

        public Transaction CreateTransaction(string categoryName, DateTime date, double amount, bool isIncome)
        {
            Transaction newTransaction = isIncome ? new Income(categoryName, date, amount) : new Expense(categoryName, date, amount);
            TransactionController.AddTransaction(newTransaction);
            return newTransaction;
        }

        public void CreateRecurringTransaction(string categoryName, DateTime date, double amount, bool isIncome,
            DateTime endOfRecurrence, int frequency)
            {
            TimeSpan timeSpan = endOfRecurrence - date;
            double totalDays = timeSpan.TotalDays;
            int amountOfTransactionsTotal = (int)(totalDays / frequency);
            Transaction newTransaction = CreateTransaction(categoryName, date, amount, isIncome);

            if (frequency == 1 || frequency == 7)
            {
                for (int i = 1; i <= amountOfTransactionsTotal; i++)
                {
                    DateTime nextTransactionDate = newTransaction.Date.AddDays(frequency * i);
                    CreateTransaction(categoryName, nextTransactionDate,
                        newTransaction.Amount, isIncome);
                }
            }

            if (frequency == 30)
            {
                for (int i = 1; i <= amountOfTransactionsTotal; i++)
                {
                    DateTime nextTransactionDate = newTransaction.Date.AddMonths(i);
                   CreateTransaction(categoryName, nextTransactionDate,
                        newTransaction.Amount, isIncome);
                }
            }

            if (frequency == 365)
            {
                for (int i = 1; i <= amountOfTransactionsTotal; i++)
                {
                    DateTime nextTransactionDate = newTransaction.Date.AddYears(i);
                    CreateTransaction(categoryName, nextTransactionDate,
                        newTransaction.Amount, isIncome);
                }
            }
        }
    }
}using System;
using BudgetApp.Menus.TrueMenus;
using Spectre.Console;

namespace BudgetApp
{
    public class MainMenu : Menu
    {
        private SelectableMenu selectableMenu = new SelectableMenu("Main Menu", new string[] {"View Transactions", "Add Income/Expense", "Add Budget", "Manage Categories", "Exit"});
        
        public MainMenu() : base("Main Menu")
        {
            CanBePopped = false;
        }
        
        public override void Run()
        {
            int selection = selectableMenu.Run();
            switch (selection)
            {
                case 0:
                    MenuStack.PushMenu(new CalendarMenu());
                    break;
                case 1:
                    MenuStack.PushMenu(new TransactionCreationMenu());
                    break;
                case 2:
                    MenuStack.PushMenu(new BudgetCreationMenu());
                    break;
                case 3:
                    MenuStack.PushMenu(new CategorySetMenu());
                    break;
                case 4:
                    Environment.Exit(0);
                    break;
            }
        }
    }
}ï»¿using System;
using System.Transactions;

namespace BudgetApp.Menus.TrueMenus
{
    public class CategorySetMenu : Menu
    {
        private SelectableMenu selectableMenu;
        private Frequency _frequency = Frequency.Daily;

        enum Frequency
        {
            Daily = 1,
            Weekly = 7,
            Monthly = 30,
            Yearly = 365,
        }
        public CategorySetMenu() : base("Category Setting Menu")
        {
            selectableMenu = new SelectableMenu("Select Category & Period for Category Budget", GetOptions());
        }

        public override void Run()
        {
            bool categorySet = false;

            while (!categorySet)
            {
                selectableMenu.Options = GetOptions();
                int selectedIndex = selectableMenu.Run();
                HandleSelection(selectedIndex);
            }
        }

        private string[] GetOptions()
        {
            var categories = CategoryController.GetCategories();
            string[] names = new string[categories.Count + 2];

            names[0] = "Frequency: " + _frequency;

            int i = 1;
            foreach (var category in categories)
            {
                names[i] = $"{i}. {category.name}";
                i++;
            }

            names[names.Length - 1] = "Add Category";

            return names;
        }

        private string DisplayBoolean(bool value) => value ? "Yes" : "No";

        private void HandleSelection(int selectedIndex)
        {
            int categoryCount = CategoryController.GetCategories().Count;

            if (selectedIndex == 0)
            {
                UpdateFrequency();
            }
            else if (selectedIndex == categoryCount + 1)
            {
                CategoryController.ReceiveNewCategory();
                MenuStack.PopMenu();
            }
            else
            {
                Category category = CategoryController.GetCategories()[selectedIndex - 1]; // Adjust index for categories
                CategoryController.SetCategoryBudget(category, (int)_frequency);
                MenuStack.PopMenu();
            }
        }



        private void UpdateFrequency()
        {
            switch (_frequency)
            {
                case Frequency.Daily:
                    _frequency = Frequency.Weekly;
                    break;
                case Frequency.Weekly:
                    _frequency = Frequency.Monthly;
                    break;
                case Frequency.Monthly:
                    _frequency = Frequency.Yearly;
                    break;
                case Frequency.Yearly:
                    _frequency = Frequency.Daily;
                    break;
                default:
                    _frequency = Frequency.Daily;
                    break;
            }
        }
    }
}

using BudgetApp.Management;
using BudgetApp.Menus.TrueMenus;


namespace BudgetApp;

public class TransactionSelectionMenu : Menu
{
    private SelectableMenu _selectableMenu;
    private Transaction[] transactions;

    public TransactionSelectionMenu(string name, Transaction[] transactions) : base(name)
    {
        this.transactions = transactions;
    }

    private string[] GetOptions()
    {
        string[] options = new string[transactions.Length];
        for (int i = 0; i < transactions.Length; i++)
        {
            options[i] = transactions[i].Display;
        }
        return options;
    }

    private void FillTransactionMenu()
    {
        _selectableMenu = new SelectableMenu("Select Transaction to Edit:", GetOptions());
    }
    
    private void HandleSelection(int selectedIndex)
    {
        Transaction selectedTransaction = transactions[selectedIndex];
        Console.WriteLine("You have selected: " + selectedTransaction.Display);
        SelectableMenu decisionMenu = new SelectableMenu("What would you like to do?", new string[] {"Edit", "Delete", "View Note", "Back"});
        int decision = decisionMenu.Run();
        switch (decision)
        {
            case 0:
                MenuStack.PushMenu(new TransactionCreationMenu(selectedTransaction));
                break;
            case 1:
                TransactionController.DeleteTransaction(selectedTransaction);
                Console.WriteLine("Transaction Deleted!");
                Console.ReadKey();
                MenuStack.PopMenu();
                break;
            case 2:
                if (selectedTransaction.Note == null)
                {
                    Console.WriteLine("No note found for this transaction.");
                    Console.WriteLine("Enter a note for the transaction:");
                    string note = Console.ReadLine();
                    TransactionController.AddNoteToTransaction(selectedTransaction, note);
                    Console.WriteLine("Note added!");
                    Console.ReadKey();
                }
                else
                {
                    Console.WriteLine("Note: " + selectedTransaction.Note);
                    Console.ReadKey();
                }
                break;
            case 3:
                Run();
                break;
        }
    }
    
    public override void Run()
    {
        while (true)
        {
            FillTransactionMenu();
            int selectedIndex = _selectableMenu.Run();
            HandleSelection(selectedIndex);
        }
    }
    
}using System.Text;
using BudgetApp.Management;
using BudgetApp.Menus;
using Spectre.Console;

namespace BudgetApp
{
    public class CalendarMenu : Menu
    {
        private readonly Calendar calendar = new Calendar();

        public CalendarMenu() : base("Calendar")
        {
        }

        public override void Run()
        {
            while (true)
            {
                DisplayMenu();
                NavigateMenu();
            }
        }

        private void NavigateMenu()
        {
            var keyPressed = MenuFeatures.GetInput();
            if (keyPressed == ConsoleKey.Backspace)
            {
                MenuStack.PopMenu();
            }
            else if (keyPressed == ConsoleKey.Enter)
            {
                var transactions = TransactionController.GetTransactionsWithinRangeAsArray(calendar.Start, calendar.End);
                if (transactions.Length > 0)
                {
                    MenuStack.PushMenu(new TransactionSelectionMenu("Transaction Selection Menu", transactions));
                }
            }
            else
            {
                calendar.NavigateCalendar(keyPressed, "yyyy/MM", "yyyy", "yyyy/MM/dd");
            }
        }
        
        private void DisplayMenu()
        {
            Console.Clear();
            var asciiArt = new FigletText("Budget App");
            AnsiConsole.Render(asciiArt.Color(Color.Green));

            var table1 = new Table() { Border = TableBorder.Rounded };
            table1.AddColumn(new TableColumn("[yellow]" + calendar._currentScale + " " + calendar.Start.ToString(calendar.Format) + "[/]").Centered());
            table1.Width(75);
            AnsiConsole.Render(table1);

            var table2 = new Table() { Border = TableBorder.Rounded };
            table2.AddColumn(new TableColumn("Transaction Summary").LeftAligned());
            table2.AddColumn(new TableColumn(RenderBudgetBreakdown()).LeftAligned());
            table2.AddRow(new Markup(RenderTransactionSummary()).LeftJustified(), new Markup(RenderCategorySummary()).Centered());
            table2.Width(75);
            AnsiConsole.Render(table2);
        }


        private string RenderTransactionSummary()
        {
            return TransactionController.TransactionSummary(calendar.Start, calendar.End);
        }

        private string RenderBudgetBreakdown()
        {
            if (Budget.Instance.yearlyAllocation == 0)
            {
                return "No overall budget set.";
            }
            else
            {
                return BudgetController.BudgetSummary(calendar.Start, calendar.End, calendar);
            }
        }

        private string RenderCategorySummary()
        {
            var sb = new StringBuilder();
            foreach (var summary in CategoryController.CategorySummary(calendar.Start, calendar.End, calendar))
            {
                sb.AppendLine(summary);
            }
            return sb.Length == 0 ? "No categories to display" : sb.ToString();
        }
    }
}using System;
using System.Data;

namespace BudgetApp
{
    public class BudgetCreationMenu : Menu
    {
        private Budget budget;
        private SelectableMenu selectableMenu;
        private Calendar calendar;
        private double amount { get; set; }
        private string dateNavigationInstructions = "Use arrow keys up and down to change scale. Use left and right to adjust date. Press Enter to confirm date.";

        private Frequency _frequency = Frequency.Daily;

        enum Frequency
        {
            Daily = 1,
            Weekly = 7,
            Monthly = 30,
            Yearly = 365,
        }

        private void ChangeFrequency()
        {
            switch (_frequency)
            {
                case Frequency.Daily:
                    _frequency = Frequency.Weekly;
                    break;
                case Frequency.Weekly:
                    _frequency = Frequency.Monthly;
                    break;
                case Frequency.Monthly:
                    _frequency = Frequency.Yearly;
                    break;
                case Frequency.Yearly:
                    _frequency = Frequency.Daily;
                    break;
            }
        }

        public BudgetCreationMenu() : base("Budget Creation Menu")
        {
            budget = BudgetController.GetBudget();
            selectableMenu = new SelectableMenu("Create Budget:", GetOptions());
        }

        public override void Run()
        {
            bool budgetCreated = false;

            while (!budgetCreated)
            {
                selectableMenu.Options = GetOptions();
                int selectedIndex = selectableMenu.Run();
                budgetCreated = HandleSelection(selectedIndex);
            }
        }

        private string[] GetOptions()
        {
            return new string[]
            {
                "Timeframe: " + _frequency,
                "Amount : " + amount,
                "Create Budget"
            };
        }

        private string DisplayBoolean(bool value) => value ? "Yes" : "No";

        private bool HandleSelection(int selectedIndex)
        {
            switch (selectedIndex)
            {
                case 0:
                    ChangeFrequency();
                    break;
                case 1:
                    SetAmount(budget);
                    break;
                case 2:
                    CreateBudget();
                    break;
            }
            return false;
        }

        private double SetAmount(Budget budget)
        {
            Console.Clear();
            amount = Validator.ReceiveValidAmount();

            switch (_frequency)
            {
                case Frequency.Daily:
                    BudgetController.GetBudget().yearlyAllocation = amount*365;
                    return amount;
                case Frequency.Weekly:
                    BudgetController.GetBudget().yearlyAllocation = amount * 52;
                    return amount;
                case Frequency.Monthly:
                    BudgetController.GetBudget().yearlyAllocation = amount * 12;
                    return amount;
                case Frequency.Yearly:
                    BudgetController.GetBudget().yearlyAllocation = amount;
                    return amount;
            }
            return amount;
        }

        private void CreateBudget()
        {
            Console.WriteLine("Budget created! Press any key to continue");
            Console.ReadKey();
            MenuStack.PopMenu();
        }
    }
}using System;
using BudgetApp;
using BudgetApp.Menus;
using BudgetApp.Menus.TrueMenus;

using BudgetApp.Database;
using BudgetApp.Management;

public class TransactionCreationMenu : Menu
{
    private Calendar _transactionDateCalendar = new Calendar(DateTime.Today, "dd/MM/yyyy");
    private Calendar _calendarForEndOfRecurrance = new Calendar(DateTime.Today, "dd/MM/yyyy");
    private string _dummyCategoryName = "Food";
    private Transaction _dummyTransaction;
    private SelectableMenu _selectableMenu;
    private bool _isIncome, _isRecurring, _editMode;
    private Frequency _frequency = Frequency.Daily;

    enum Frequency
    {
        Daily = 1,
        Weekly = 7,
        Monthly = 30,
        Yearly = 365,
    }

    public TransactionCreationMenu() : base("Transaction Creation Menu")
    {
        TransactionFactory transactionFactory = TransactionFactory.GetInstance();
        _dummyTransaction = transactionFactory.CreateDummyTransaction(_dummyCategoryName, DateTime.Today, 0);
        _editMode = false;
        _selectableMenu = new SelectableMenu("Create Transaction:", GetOptions());
    }

    public TransactionCreationMenu(Transaction transactionToBeEdited) : base("Transaction Editor Menu")
    {
        CanBePopped = false;
        _editMode = true;
        TransactionFactory transactionFactory = TransactionFactory.GetInstance();
        _dummyTransaction = transactionFactory.CreateDummyTransaction(transactionToBeEdited.CategoryName, transactionToBeEdited.Date, transactionToBeEdited.Amount);
        _dummyCategoryName = transactionToBeEdited.CategoryName;
        _selectableMenu = new SelectableMenu("Edit Transaction:", GetOptions());
        TransactionController.DeleteTransaction(transactionToBeEdited);
    }

    private void CreateOrEditTransaction()
    {
        TransactionFactory transactionFactory = TransactionFactory.GetInstance();
        if (_isRecurring)
        {
            transactionFactory.CreateRecurringTransaction(_dummyCategoryName,
                _transactionDateCalendar.Start, _dummyTransaction.Amount, _isIncome,
                _calendarForEndOfRecurrance.Start, (int)_frequency);
        }
        else
        {
            transactionFactory.CreateTransaction(_dummyCategoryName, _transactionDateCalendar.Start,
                _dummyTransaction.Amount, _isIncome);
        }
        Console.WriteLine(_editMode ? "Transaction Edited!" : "Transaction Created!");
        Console.ReadKey();

        Database.Instance.SaveCategories(CategoryController.GetCategories());
        Database.Instance.SaveTransactions(TransactionController.GetTransactions());

        MenuStack.PopMenu();
    }

    private void UpdateAmount()
    {
        Console.Clear();
        _dummyTransaction.Amount = Validator.ReceiveValidAmount();
    }

    private void UpdateDate(Calendar calendar)
    {
        Console.WriteLine("Use arrow keys to navigate the calendar and Enter to select a date.");
        Console.WriteLine("Press Enter to confirm the selected date.");

        while (true)
        {
            Console.Clear();

            string alternateScale = GetAlternateScale(calendar._currentScale);

            Console.WriteLine("Change by " + alternateScale + "...");
            Console.WriteLine("Selected Date:");
            DisplayCalendar(calendar);

            ConsoleKey keyPressed = Console.ReadKey(true).Key;
            calendar.NavigateCalendar(keyPressed, "yyyy/MM", "yyyy", "yyyy/MM/dd");

            if (keyPressed == ConsoleKey.Enter)
            {
                calendar.Format = "dd/MM/yyyy";
                break;
            }
        }
        _selectableMenu.Options = GetOptions();
    }

    private string GetAlternateScale(Calendar.DurationScale scale)
    {
        return scale switch
        {
            Calendar.DurationScale.Yearly => "year",
            Calendar.DurationScale.Monthly => "month",
            Calendar.DurationScale.Daily => "day",
            _ => "year"
        };
    }

    private void DisplayCalendar(Calendar calendar)
    {
        Console.WriteLine(calendar.Start.ToString(calendar.Format));
    }

    private void SetCategory()
    {
        var categories = CategoryController.GetCategories();
        var selectedIndex = new SelectableMenu("Select a category:", CategoryController.GetCategoryNamesPlusAddOption()).Run();

        if (selectedIndex == categories.Count)
        {
            _dummyCategoryName = CategoryController.ReceiveNewCategory().name;
        }
        else
        {
            _dummyCategoryName = categories[selectedIndex].name;
        }
    }

    private string DisplayRecurrenceBoolean(bool value) => value ? "Yes" : "No";

    private string DisplayIncomeBoolean(bool value) => value ? "Income" : "Expense";

    private string[] GetOptions()
    {
        var options = new List<string>
        {
            "Amount: " + _dummyTransaction.Amount,
            "Date: " + _transactionDateCalendar.Start.ToString(_transactionDateCalendar.Format),
            "Category: " + _dummyCategoryName,
            "Expense/Income: " + DisplayIncomeBoolean(_isIncome),
            "Recurring: " + DisplayRecurrenceBoolean(_isRecurring),
        };

        if (_isRecurring)
        {
            options.Add("Frequency: " + _frequency);
            options.Add("End of Recurrence: " + _calendarForEndOfRecurrance.Start.ToString(_calendarForEndOfRecurrance.Format));
        }

        options.Add(_editMode ? "Edit Transaction" : "Create Transaction");
        return options.ToArray();
    }

    private void HandleSelection(int selectedIndex)
    {
        switch (selectedIndex)
        {
            case 0:
                UpdateAmount();
                break;
            case 1:
            case 6:
                UpdateDate(selectedIndex == 1 ? _transactionDateCalendar : _calendarForEndOfRecurrance);
                break;
            case 2:
                SetCategory();
                break;
            case 3:
                _isIncome = !_isIncome;
                break;
            case 4:
                _isRecurring = !_isRecurring;
                break;
            case 5:
                if (!_isRecurring) CreateOrEditTransaction();
                else
                    UpdateFrequency();
                break;
            case 7:
                CreateOrEditTransaction();
                break;
        }
    }

    public override void Run()
    {
        while (true)
        {
            _selectableMenu.Options = GetOptions();
            int selectedIndex = _selectableMenu.Run();
            HandleSelection(selectedIndex);
        }
    }

    private void UpdateFrequency()
    {
        switch (_frequency)
        {
            case Frequency.Daily:
                _frequency = Frequency.Weekly;
                break;
            case Frequency.Weekly:
                _frequency = Frequency.Monthly;
                break;
            case Frequency.Monthly:
                _frequency = Frequency.Yearly;
                break;
            case Frequency.Yearly:
                _frequency = Frequency.Daily;
                break;
            default:
                _frequency = Frequency.Daily;
                break;
        }
    }
}
using BudgetApp.Menus;

namespace BudgetApp
{
    public class MenuNavigator
    {
        public int Navigate(ConsoleKey keyPressed, string[] options, int selectedIndex)
        {
            if (keyPressed == ConsoleKey.UpArrow)
            {
                selectedIndex--;
                if (selectedIndex == -1)
                {
                    selectedIndex = options.Length - 1;
                }
            }
            else if (keyPressed == ConsoleKey.DownArrow)
            {
                selectedIndex++;
                if (selectedIndex == options.Length)
                {
                    selectedIndex = 0;
                }
            }
            else if (keyPressed == ConsoleKey.Backspace)
            {
                if (MenuStack.PeekMenu().CanBePopped)
                {
                    MenuStack.PopMenu();
                }
            }
            return selectedIndex;
        }
    }
}using System;
using System.Data;
using BudgetApp.Menus;
using Spectre.Console;


namespace BudgetApp
{
    public class SelectableMenu
    {
        private MenuNavigator _menuNavigator;
        public MenuDisplay _menuDisplay;
        public string[] Options { get; set; }
        private string Prompt { get; }
        private int selectedIndex;

        public SelectableMenu(string prompt, string[] options)
        {
            this._menuNavigator = new MenuNavigator();
            this._menuDisplay = new MenuDisplay();
            this.Options = options;
            this.Prompt = prompt;
            this.selectedIndex = 0;
        }

        public int Run()
        {
            while (true)
            {
                _menuDisplay.DisplayOptions(Prompt, Options, selectedIndex);
                var keyPressed = MenuFeatures.GetInput();
                selectedIndex = _menuNavigator.Navigate(keyPressed, Options, selectedIndex);
                if (keyPressed == ConsoleKey.Enter)
                {
                    return selectedIndex;
                }
            }
        }
    }
}

        using Spectre.Console;

namespace BudgetApp;

public class MenuDisplay
{
    public void DisplayOptions(string prompt, string[] options, int selectedIndex)
    {
        Clear();

        var asciiArt = new FigletText("Budget App");
        AnsiConsole.Render(asciiArt.Color(Color.Green));
        
        AnsiConsole.MarkupLine(prompt);
        for (int i = 0; i < options.Length; i++)
        {
            var currentOption = options[i];
            string prefix;

            if (i == selectedIndex)
            {
                prefix = "*";
            }
            else
            {
                prefix = " ";
            }
        
            AnsiConsole.MarkupLine($"{prefix} {currentOption} {prefix}");
        }
    }

    public void Clear()
    {
        Console.Clear();
    }
}namespace BudgetApp.Menus;

public class MenuFeatures
{
    public static string PrintCentered(string messageToCenter, int length)
    {
        string padding = GetPaddingString(messageToCenter, length);
        return padding + messageToCenter + padding;
    }

    private static string GetPaddingString(string stringToPad, int length)
    {
        int padding = (length - stringToPad.Length) / 2;
        return new string(' ', padding);
    }
    
    public static ConsoleKey GetInput()
    {
        ConsoleKeyInfo keyInfo = Console.ReadKey(true);
        return keyInfo.Key;
    }
}namespace BudgetApp
{
    public class Calendar
    {
        public DateTime Start { get; set; }
        public DateTime End { get; set; }
        
        public DurationScale _currentScale { get; set; }

        public string Format { get; set; }

        public Calendar()
        {
            Start = new DateTime(DateTime.Now.Year, 1, 1);
            End = Start.AddYears(1).AddSeconds(-1);
            _currentScale = DurationScale.Yearly;
            Format = "yyyy";
        }
        
        public Calendar(DateTime customStart, string customFormat)
        {
            this.Start = customStart;
            this.Format = customFormat;
        }

        public enum DurationScale
        {
            Yearly,
            Monthly,
            Daily
        }

        
        public void NavigateCalendar(ConsoleKey keyPressed, string monthlyFormat, string yearlyFormat, string dailyFormat)
        {
            switch (keyPressed)
            {
                case ConsoleKey.RightArrow:
                    MoveToNextDate();
                    break;
                case ConsoleKey.LeftArrow:
                    MoveToPreviousDate();
                    break;
                case ConsoleKey.UpArrow:
                    IncreaseTimeScale(monthlyFormat, yearlyFormat, dailyFormat);
                    break;
                case ConsoleKey.DownArrow:
                    DecreaseTimeScale(monthlyFormat, yearlyFormat, dailyFormat);
                    break;
            }
        }
        
        private void MoveToNextDate()
        {
            switch (_currentScale)
            {
                case DurationScale.Yearly:
                    Start = Start.AddYears(1);
                    End = Start.AddYears(1).AddSeconds(-1);
                    break;
                case DurationScale.Monthly:
                    Start = Start.AddMonths(1);
                    End = Start.AddMonths(1).AddSeconds(-1);
                    break;
                case DurationScale.Daily:
                    Start = Start.AddDays(1);
                    End = Start.AddDays(1).AddSeconds(-1);
                    break;
            }
        }

        private void MoveToPreviousDate()
        {
            switch (_currentScale)
            {
                case DurationScale.Yearly:
                    Start = Start.AddYears(-1);
                    End = Start.AddYears(1).AddSeconds(-1);
                    break;
                case DurationScale.Monthly:
                    Start = Start.AddMonths(-1);
                    End = Start.AddMonths(1).AddSeconds(-1);
                    break;
                case DurationScale.Daily:
                    Start = Start.AddDays(-1);
                    End = Start.AddDays(1).AddSeconds(-1);
                    break;
            }
        }

        private void IncreaseTimeScale(string monthlyFormat, string yearlyFormat, string dailyFormat)
        {
            if (_currentScale == DurationScale.Yearly)
            {
                _currentScale = DurationScale.Monthly;
                Start = new DateTime(End.Year, End.Month, 1);
                End = Start.AddMonths(1).AddSeconds(-1);
                Format = monthlyFormat;
            }
            else if (_currentScale == DurationScale.Monthly)
            {
                _currentScale = DurationScale.Daily;
                End = Start.AddDays(1).AddSeconds(-1);
                Format = dailyFormat;
            }
            else if (_currentScale == DurationScale.Daily)
            {
                _currentScale = DurationScale.Yearly;
                Start = new DateTime(End.Year, 1, 1);
                End = Start.AddYears(1).AddSeconds(-1);
                Format = yearlyFormat;
            }
        }
        
        private void DecreaseTimeScale(string monthlyFormat, string yearlyFormat, string dailyFormat)
        {
            if (_currentScale == DurationScale.Yearly)
            {
                _currentScale = DurationScale.Daily;
                End = Start.AddDays(1).AddSeconds(-1);
                Format = dailyFormat;
            }
            else if (_currentScale == DurationScale.Daily)
            {
                _currentScale = DurationScale.Monthly;
                Start = new DateTime(End.Year, End.Month, 1);
                End = Start.AddMonths(1).AddSeconds(-1);
                Format = monthlyFormat;
            }
            else if (_currentScale == DurationScale.Monthly)
            {
                _currentScale = DurationScale.Yearly;
                Start = new DateTime(End.Year, 1, 1);
                End = Start.AddYears(1).AddSeconds(-1);
                Format = yearlyFormat;
            }
        }
    }
}
using System;

namespace BudgetApp;

public class Menu
{
    public string Name { get; set; }
    public bool CanBePopped { get; set; } = true;

    public Menu(string name)
    {
        Name = name;
    }

    public virtual void Run()
    {
    }
}
using System;

namespace BudgetApp
{
    public static class MenuStack
    {
        public static Stack<Menu> menuStack = new Stack<Menu>();

        public static void PushMenu(Menu menu)
        {
            Console.WriteLine("MENU COUNT " + menuStack.Count);
            menuStack.Push(menu);
            menu.Run();
        }

        public static void PopMenu()
        {
            if (menuStack.Count > 0)
            {
                menuStack.Pop();
            }

            Menu menu = PeekMenu();
            if (menuStack.Count > 0)
            {
                menu.Run();
            }  
        }

        internal static Menu PeekMenu()
        {
            try
            {
                return menuStack.Peek();
            }
            catch (InvalidOperationException ex)
            {
                Console.WriteLine("You are already at the main menu" + ex.Message);
                return null;
            }
        }
    }
}ï»¿using System;
using BudgetApp;

class Program
{
    static void Main(string[] args)
    {
        ExpenseTrackerApp.Run();
    }
}